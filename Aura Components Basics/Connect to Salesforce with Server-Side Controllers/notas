campingList.cmp
<aura:component>
    <aura:attribute name="items" type="Camping_Item__c[]" />
    <aura:attribute name="newItem" type="Camping_Item__c" 
                    default="{ 'sobjectType' : 'Camping_Item__c',
                             'Quantity__c' : 0,
                             'Price__c' : 0 }" />

    <!-- CREATE NEW ITEM -->
    <div aria-labelledby="newCampingItemform">
        <!-- BOXED AREA -->
        <fieldset class="slds-box slds-theme_default slds-container_small">
        <legend id="newCampingItemform" class="slds-text-heading_small
          slds-p-vertical_medium">
          Add Camping Item
        </legend>
        <!-- CREATE NEW CAMPING ITEM FORM -->
        <form class="slds-form_stacked">
            <lightning:input aura:id="campingItemForm" label="Camping Item Name"
                             name="campingItemName"
                             value="{!v.newItem.Name}"
                             required="true" />
            <lightning:input type="number" aura:id="campingItemForm" label="Quantity"
                             name="campingItemQuantity"
                             value="{!v.newItem.Quantity__c}"
                             required="true"
                             min="1" 
                             messageWhenRangeUnderflow="Enter a quantity that's at least 1" />
            <lightning:input type="number" aura:id="campingItemForm" label="Price"
                             name="campingItemPrice"
                             value="{!v.newItem.Price__c}"
                             formatter="currency"
                             required="false" />
            <lightning:input type="checkbox" aura:id="campingItemForm" label="Packed?"
                             name="campingItemPacked"
                             checked="{!v.newItem.Packed__c}" />
            
            <lightning:button label="Create Item"
                              class="slds-m-top_medium"
                              variant="brand"
                              onclick="{!c.clickCreateItem}" />
            
        </form>
        <!-- / CREATE NEW CAMPING ITEM FORM -->
      </fieldset>
      <!-- / BOXED AREA -->
    </div>
    <!-- / CREATE NEW ITEM -->
    
    <lightning:card title="Camping Items">
        <p class="slds-p-horizontal_small">
            <aura:iteration items="{!v.items}" var="item">
                <c:campingListItem item="{!item}"/>
            </aura:iteration>
        </p>
    </lightning:card>
</aura:component>
-------------------------------------------------------------
CampingListController.apx
// 5.1) Create a CampingListController Apex class with a getItems method and saveItem method
public with sharing class CampingListController {
    
    // getItems
    @AuraEnabled
    public static List<Camping_Item__c> getItems(){
        return [SELECT Id, Name, Quantity__c, Price__c, Packed__c FROM Camping_Item__c]; 
    }
    
    // saveItem
    @AuraEnabled
    public static Camping_Item__c saveItem(Camping_Item__c campingItem){
        upsert campingItem;
        return campingItem;
    }

}
---------------------------------------------------------
controller.js 
({
    
    // 6.3) The handleAddItem method saves the record to the database and adds the record to the items value provider
    handleAddItem : function(component, event, helper) {
        var item = event.getParam("item");
        
        var action = component.get("c.saveItem");
        action.setParams({
            "item": item
        });
        
        action.setCallback(this, function(response){
            var state = response.getState();
            if(component.isValid() && state === "SUCCES"){
                var item = component.get("v.items");
                items.push(item);
                component.set("v.items", items);
            }
        });
        $A.enqueueAction(action);
    },    
    
	// 5.2) Add a doInit initialization handler that loads existing records from the database when the component starts up
    doInit : function(component, event, helper){
        var action = component.get("c.getItems");
        action.setCallback(this, function(response){
            var state = response.getState();
            if(state === "SUCCES"){
                component.set("v.items", response.getReturnValue())
            } else {
                console.log("Failed wit state: " + state)
            }
        });
        $A.enqueueAction(action);
    },
    
    // 4.6) If the form is valid, the JavaScript controller pushes the newItem onto the array of existing items, 
	//      triggers the notification that the items value provider has changed, and resets the newItem value
	//      provider with a blank sObjectType of Camping_Item__c (for this challenge, place the code in your 
	//      component's controller, not the helper)
    clickCreateItem : function(component, event, helper) {
	    let validItem = component.find('itemform').reduce(function (validSoFar, inputCmp) {
            // Displays error messages for invalid fields
            inputCmp.showHelpMessageIfInvalid();
            return validSoFar && inputCmp.get('v.validity').valid;
        }, true);
        // If we pass error checking, do some real work
        if(validItem){
            // Create the new expense
            let newCampItem = component.get("v.newItem");
            console.log("Create item: " + JSON.stringify(newCampItem));
			// 5.3) Modify the JavaScript controller to use a createItem method in the helper to save records to the
			//		database from a valid form submission. The new items are added to the controller's items value provider.
            helper.createItem(component, newCampItem);
            
            let campingItems = component.get("v.items");
            console.log("Before: " + JSON.stringify(campingItems));

            
            // triggers the notification that the items value provider has changed
            let item1 = JSON.parse(JSON.stringify(newCampItem));
            
            // a√±ade el newItem al string
            campingItems.push(item1);
            console.log("After: " + JSON.stringify(campingItems));

            // pushes the newItem onto the array of existing items
            component.set("v.items", campingItems);

            // resets the newItem value provider with a blank sObjectType of Camping_Item__c
            component.set("v.newItem", {'sobjectType': 'Camping_Item__c',
                        'Name': '',
                        'Quantity__c': 0,
                        'Price__c': 0,
                        'Packed__c': false});
        }
    }

})
---------------------------------------------------
helper.js
({
	// 5.3) Modify the JavaScript controller to use a createItem method in the helper to save records to the database from
	//       a valid form submission. The new items are added to the controller's items value provider
	createItem : function(component, newCampingItem) {
		var action = component.get("c.saveItem");
        action.setParams({
            "campingItem" : newCampingItem
        });
        
        action.setCallback(this, function(response){
            var state = response.getState();
            if(state==="SUCCES"){
                var parsedCampingItem = JSON.parse(JSON.stringify(newCampingItem));
                console.log(""+JSON.parse(JSON.stringify(parsedCampingItem)), JSON.stringify(parsedCampingItem));
                var campingItems = JSON.parse(JSON.stringify(component.get("v.items")));
                campingItems.push(parsedCampingItem);
                component.set("v.items", campingItems);
                component.set("v.newItem", {'sobjectType': 'Camping_Item__c',
                        'Name': '',
                        'Quantity__c': 0,
                        'Price__c': 0,
                        'Packed__c': false});
            }
        });
        $A.enqueueAction(action);
	}
    
})
